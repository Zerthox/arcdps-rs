window.SIDEBAR_ITEMS = {"fn":[["all_consuming","Succeeds if all the input has been consumed by its child parser."],["backtrack_err","Transforms an [`ErrMode::Cut`] (unrecoverable) to [`ErrMode::Backtrack`] (recoverable)"],["complete","Transforms `Incomplete` into `Backtrack`."],["cond","Calls the parser if the condition is met."],["consumed","if the child parser was successful, return the consumed input with the output as a tuple. Functions similarly to recognize except it returns the parser output as well."],["cut","Deprecated, see [`cut_err`]"],["cut_err","Transforms an [`ErrMode::Backtrack`] (recoverable) to [`ErrMode::Cut`] (unrecoverable)"],["eof","Match the end of the [`Stream`]"],["fail","A parser which always fails."],["flat_map","Creates a new parser from the output of the first parser, then apply that parser over the rest of the input."],["into","automatically converts the child parserâ€™s result to another type"],["iterator","Creates an iterator from input data and a parser."],["map","Maps a function on the result of a parser."],["map_opt","Applies a function returning an `Option` over the result of a parser."],["map_parser","Applies a parser over the result of another one."],["map_res","Applies a function returning a `Result` over the result of a parser."],["not","Succeeds if the child parser returns an error."],["opt","Apply a [`Parser`], producing `None` on [`ErrMode::Backtrack`]."],["peek","Tries to apply its parser without consuming the input."],["recognize","If the child parser was successful, return the consumed input as produced value."],["rest","Return the remaining input."],["rest_len","Return the length of the remaining input."],["success","Always succeeds with given value without consuming any input."],["todo","A placeholder for a not-yet-implemented [`Parser`]"],["value","Returns the provided value if the child parser succeeds."],["verify","Returns the result of the child parser if it satisfies a verification function."]],"struct":[["And","Implementation of [`Parser::and`]"],["AndThen","Implementation of [`Parser::and_then`]"],["ByRef","Implementation of [`Parser::by_ref`][Parser::by_ref]"],["CompleteErr","Implementation of [`Parser::complete_err`]"],["Context","Implementation of [`Parser::context`]"],["ErrInto","Implementation of [`Parser::err_into`]"],["FlatMap","Implementation of [`Parser::flat_map`]"],["Map","Implementation of [`Parser::map`]"],["MapRes","Implementation of [`Parser::map_res`]"],["Or","Implementation of [`Parser::or`]"],["OutputInto","Implementation of [`Parser::output_into`]"],["ParseTo","Implementation of [`Parser::parse_to`]"],["ParserIterator","Main structure associated to [`iterator`]."],["Recognize","Implementation of [`Parser::recognize`]"],["Span","Implementation of [`Parser::span`]"],["Value","Implementation of [`Parser::value`]"],["Verify","Implementation of [`Parser::verify`]"],["VerifyMap","Implementation of [`Parser::verify_map`]"],["Void","Implementation of [`Parser::void`]"],["WithRecognized","Implementation of [`Parser::with_recognized`]"],["WithSpan","Implementation of [`Parser::with_span`]"]]};