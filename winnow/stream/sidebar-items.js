window.SIDEBAR_ITEMS = {"enum":[["CompareResult","Result of [`Compare::compare`]"]],"struct":[["BStr","Improved `Debug` experience for `&[u8]` UTF-8-ish streams"],["BitOffsets","Iterator for [bit][crate::bits] stream (`(I, usize)`)"],["Bytes","Improved `Debug` experience for `&[u8]` byte streams"],["Located","Allow collecting the span of a parsed token"],["Partial","Mark the input as a partial buffer for streaming input."],["Stateful","Thread global state through your parsers"]],"trait":[["Accumulate","Abstracts something which can extend an `Extend`. Used to build modified input slices in `escaped_transform`"],["AsBStr","Helper trait for types that can be viewed as a byte slice"],["AsBytes","Helper trait for types that can be viewed as a byte slice"],["AsChar","Transforms a token into a char for basic string parsing"],["Compare","Abstracts comparison operations"],["ContainsToken","Check if a token in in a set of possible tokens"],["FindSlice","Look for a slice in self"],["Location","Number of indices input has advanced since start of parsing"],["Offset","Useful functions to calculate the offset between slices and show a hexdump of a slice"],["ParseSlice","Used to integrate `str`â€™s `parse()` method"],["SliceLen","Abstract method to calculate the input length"],["Stream","Core definition for parser input state"],["StreamIsPartial","Marks the input as being the complete buffer or a partial buffer for streaming input"],["ToUsize","Helper trait to convert numbers to usize."],["UpdateSlice","Convert a `Stream` into an appropriate `Output` type"]],"type":[["Str","UTF-8 Stream"]]};