window.SIDEBAR_ITEMS = {"enum":[["ErrMode","The `Err` enum indicates the parser was not successful"],["ErrorKind","Indicates which parser returned an error"],["Needed","Contains information on needed data if a parser returned `Incomplete`"],["VerboseErrorKind","Error context for `VerboseError`"]],"fn":[["append_error","Combines an existing error with a new one created from the input position and an [`ErrorKind`]. This is useful when backtracking through a parse tree, accumulating error context on the way"],["context","Create a new error from an input position, a static string and an existing error. This is used mainly in the [context] combinator, to add user friendly information to errors when backtracking through a parse tree"],["convert_error","Transforms a `VerboseError` into a trace with input position information"],["dbg_dmp","Prints a message and the input if the parser fails."],["make_error","Creates an error from the input position and an [`ErrorKind`]"]],"struct":[["Error","Default error type, only contains the error’ location and kind"],["VerboseError","Accumulates error information while backtracking"]],"trait":[["ContextError","Used by the [`context`] to add custom data to error while backtracking"],["ErrorConvert","Equivalent of `From` implementation to avoid orphan rules in bits parsers"],["FinishIResult","Extension trait to convert a parser’s [`IResult`] to a more manageable type"],["FromExternalError","Create a new error with an external error, from [`std::str::FromStr`]"],["ParseError","The basic [`Parser`] trait for errors"]],"type":[["IResult","Holds the result of [`Parser`]"]]};