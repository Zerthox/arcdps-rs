window.SIDEBAR_ITEMS = {"enum":[["Err","The `Err` enum indicates the parser was not successful"],["Needed","Contains information on needed data if a parser returned `Incomplete`"]],"macro":[["error_node_position","Creates a parse error from a [`ErrorKind`], the position in the input and the next error in the parsing tree"],["error_position","Creates a parse error from a [`ErrorKind`] and the position in the input"]],"mod":[["bits","Bit level parsers"],["branch","Choice combinators"],["bytes","Parsers recognizing bytes streams"],["character","Character specific parsers and combinators"],["combinator","List of parsers and combinators"],["error","Error management"],["input","Input capability for nom combinators to parse"],["lib","Lib module to re-export everything needed from `std` or `core`/`alloc`. This is how `serde` does it, albeit there it is not public."],["multi","Combinators applying their child parser multiple times"],["number","Parsers recognizing numbers"],["prelude","Core concepts available for glob import"],["sequence","Combinators applying parsers in sequence"]],"trait":[["FinishIResult","Extension trait to convert a parserâ€™s [`IResult`] to a more manageable type"],["IntoOutputIResult","Convert an `Input` into an appropriate `Output` type"],["Parser","All nom parsers implement this trait"]],"type":[["IResult","Holds the result of parsing functions"]]};